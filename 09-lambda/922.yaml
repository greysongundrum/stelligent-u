Resources:

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'This Lambada prints out Hello AWS'
      FunctionName: FunctionJunction 
      Role: !GetAtt LambdaFullAccess.Arn
      Runtime: python3.8
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: greysongundrumlambdabucket
        S3Key: pythonlambda.zip
      Tags:
        - Key: keyname
          Value: value

  MyDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Module9
      AttributeDefinitions:
        - AttributeName: Key1
          AttributeType: S
      KeySchema:
        - AttributeName: Key1
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  LambdaFullAccess:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Gateway for Hello World
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: GreysonGundrumGATEWAAAAYYYY

  apiGatewayresource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: 'helloworld'
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId

  LambdaFunctionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref apiGatewayresource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters: 
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: '200'
        Uri: arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:324320755747:function:FunctionJunction/invocations
      MethodResponses:
        - StatusCode: '200'

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/greysongudrumapigatestagename/${apiGatewayHTTPMethod}/PATH_PART
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*/helloworld
      


  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref apiGateway
      StageName: test
    DependsOn:
    - LambdaFunctionMethod



  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/FunctionJunction
      RetentionInDays: 90
