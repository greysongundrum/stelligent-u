AWSTemplateFormatVersion: '2010-09-09'
Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCidr
      VpcId: !Ref DefaultVPC
      AvailabilityZoneId: usw2-az3

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCidr2
      VpcId: !Ref DefaultVPC
      AvailabilityZoneId: usw2-az2

  SSHBastion:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      SubnetId: !Ref PublicSubnet
      KeyName: !Ref Keyname
      SecurityGroupIds:
        - !Ref PingSG

  SSHBastionEIP:
    Type: AWS::EC2::EIP

  PingSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow ping into instance.
      SecurityGroupIngress: 
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicHomeIP
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref DefaultVPC

  DefaultInternetGateway:
    Type: AWS::EC2::InternetGateway

  DefaultInternetGatewa2:
    Type: AWS::EC2::InternetGateway

  DefaultInternetGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref DefaultInternetGateway
      VpcId: !Ref DefaultVPC

  InternetGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref DefaultVPC

  DefaultRouteToInternetGatway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DefaultInternetGateway
      RouteTableId: !Ref InternetGatewayRouteTable

  DefaultRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnet
      
  DefaultRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnet2

  DefaultInternetGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref SSHBastion


  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'AutomationBoxes'
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      DesiredCapacity: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '3'
      TargetGroupARNs:
        - !Ref MyTargetGroup
    DependsOn: DefaultVPC

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: HTTP
      HealthCheckPath: '/index.html'
      VpcId: !Ref DefaultVPC

  WebServersLC:
      Type: 'AWS::AutoScaling::LaunchConfiguration'
      Properties:
        ImageId: !Ref AMI
        InstanceType: 't2.micro'
        LaunchConfigurationName: 'SimpleWebServerLC'
        SecurityGroups:
          - !Ref PingSG
        UserData: 
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash -xe

              yum install -y aws-cfn-bootstrap

              # Install the files and packages from the metadata
              /opt/aws/bin/cfn-init -v \
                --stack ${AWS::StackName} \
                --resource WebServersLC \
                --configsets All \
                --region ${AWS::Region}

              # Signal the status from cfn-init
              /opt/aws/bin/cfn-signal -e $? \
                --stack ${AWS::StackName} \
                --resource WebServersLC \
                --region ${AWS::Region}

      Metadata:
        'AWS::CloudFormation::Init':
          configSets:
            All:
              - ConfigureStelligentProject
          ConfigureStelligentProject:
            packages:
              yum:
                nginx: []
            files:
              /usr/share/nginx/html/index.html:
                content: '<p>Automation for the People</p>'
                mode: '000644'
                owner: root
                group: root
            services:
              sysvinit:
                nginx:
                  enabled: 'true'
                  ensureRunning: 'true'

  greysongundrumLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet
      - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref PingSG

  greysongundrumALBLISTENER:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref greysongundrumLB
      Port: 80
      Protocol: HTTP


Parameters:
  AMI:
    Type: String
  Keyname:
    Type: String 
  PublicHomeIP:
    Type: String
  VPCCidr:
    Type: String
  PublicSubnetCidr:
    Type: String
  PublicSubnetCidr2:
    Type: String